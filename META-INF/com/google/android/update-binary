#!/sbin/sh
# AnyKernelx
# osm0sis @ xda-developers
# negrroo
# LawRun-Kernel Edit.

OUTFD=/proc/self/fd/$2;
ZIP="$3";
DIR=`dirname "$ZIP"`;

ui_print() {
  until [ ! "$1" ]; do
    echo -e "ui_print $1\nui_print" > $OUTFD;
    shift;
  done;
}
show_progress() { echo "progress $1 $2" > $OUTFD; }
set_perm_recursive() {
  dirs=$(echo $* | $bb awk '{ print substr($0, index($0,$5)) }');
  for i in $dirs; do
    $bb chown -R $1:$2 $i;
    find "$i" -type d -exec chmod $3 {} +;
    find "$i" -type f -exec chmod $4 {} +;
  done;
}

ui_print "=================================================";
ui_print "        **          ******      negrroo";
ui_print "        **          *    *      **   **";
ui_print "        **          ******      **  **";
ui_print "        **          **          *****";
ui_print "        *******     ** **       **  **";
ui_print "        *******     **   **     **   **";
ui_print "=================================================";
ui_print "negrroo";
ui_print "LawRun-Kernel Edit.";
ui_print " ";
ui_print " ";
ui_print "Ramdisk Cleaner";
show_progress 1.34 0;
# LawRun-Edit. overlay & overlay.d
rm -rf $ramdisk/overlay;
rm -rf $ramdisk/overlay.d;
# LawRun-Edit. files
rm -rf $ramdisk/init.darkness.rc;
rm -rf $ramdisk/init.spectrum.rc;
rm -rf $ramdisk/init.spectrum.sh;
rm -rf $ramdisk/init.guyver.rc;
rm -rf $ramdisk/init.radon.rc;
rm -rf $ramdisk/init.agni.rc;
rm -rf $ramdisk/init.infected.rc;
rm -rf $ramdisk/init.dominator.rc;
rm -rf $ramdisk/init.franco.rc;
rm -rf $ramdisk/init.elementalx.rc;
rm -rf $ramdisk/init.xceed.rc;
rm -rf $ramdisk/init.morpho.rc;
rm -rf $ramdisk/init.performance_profiles.rc;
rm -rf $ramdisk/init.LawRun.rc;
rm -rf $ramdisk/profile.balance.sh;
rm -rf $ramdisk/profile.battery.sh;
rm -rf $ramdisk/profile.gaming.sh;
rm -rf $ramdisk/profile.performance.sh;
rm -rf $ramdisk/profile.Hbalance.sh;
rm -rf $ramdisk/profile.Lbalance.sh;
rm -rf $ramdisk/init.profiles.sh;
rm -rf $ramdisk/init.LawRun.sh;
rm -rf $ramdisk;
set_progress 0.8;

file_getprop() { grep "^$2" "$1" | cut -d= -f2; }
cleanup() { rm -rf /tmp/anykernel; }
if [ "$(file_getprop /tmp/anykernel/anykernel.sh do.cleanuponabort)" == 1 ]; then
    abort() { ui_print "$*"; cleanup; umount /system; umount /data; exit 1; }
  else
    abort() { ui_print "$*"; umount /system; umount /data; exit 1; }
fi;

show_progress 0.67 4;
ui_print " ";
cleanup;
mkdir -p /tmp/anykernel/bin;
cd /tmp/anykernel;
unzip -o "$ZIP";
if [ $? != 0 -o -z "$(ls /tmp/anykernel/tools)" ]; then
  abort "Unzip failed. Aborting...";
fi;
chmod -R 755 /tmp/anykernel/tools /tmp/anykernel/bin;
bb=/tmp/anykernel/tools/busybox;

umount /system;
mount -o ro -t auto /system;
mount /data;
test -f /system/system/build.prop && root=/system;

ui_print "LawRun-Kernel Profiles";
for i in $($bb --list); do
  $bb ln -s $bb /tmp/anykernel/bin/$i;
done;
if [ $? != 0 -o -z "$(ls /tmp/anykernel/bin)" ]; then
  abort "Recovery busybox setup failed. Aborting...";
fi;
PATH="/tmp/anykernel/bin:$PATH" $bb ash /tmp/anykernel/anykernel.sh $2;
if [ $? != "0" ]; then
  abort;
fi;

if [ "$(file_getprop /tmp/anykernel/anykernel.sh do.cleanup)" == 1 ]; then
  cleanup;
fi;

show_progress 0.67 4;
ui_print " ";

mount /vendor;
umount /vendor;
umount /system;
umount /data;

ui_print "Support --> https://t.me/LawRunKernel";
ui_print "Done!";
ui_print " ";
